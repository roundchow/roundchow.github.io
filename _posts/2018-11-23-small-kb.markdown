---
title:  "小程序的知识宝库"
subtitle: "一段奇妙旅程的开始 总要有佛系随缘的沉淀"
author: "wu"
avatar: "img/authors/tigerCat.jpg"
image: "img/f.jpg"
date:   2018-11-23 02:00:00
---

一段奇妙旅程的开始 总要有佛系随缘的沉淀 正如今天 开始码一码小程序的知识库

内容都是别人的总结，交过学费以后我码进自己的脑海

----- ----- ----- -----

## 【1/5】先和微信小程序交朋友

### 1.1 什么是微信小程序

如果微信是个小手机，小程序就是各种各样的App

### 1.2 微信小程序发展历程

网上的图，描述下微信小程序的几个里程碑：

<div class="scale"><img src="img/resources/wechatsmall/wechatsmallroad.png"  alt="wechatsmallroad" /></div>

### 1.3 微信小程序入口和限制

网上的图，梳理小程序的入口和限制：

<div class="scale"><img src="img/resources/wechatsmall/wechatsmallentersandlimits.png"  alt="wechatsmallentersandlimits" /></div>

### 1.4 微信小程序和 H5 对比

网上的图，比较小程序和h5：

<div class="scale"><img src="img/resources/wechatsmall/wechatsmallvsh5.png"  alt="wechatsmallvsh5" /></div>

### 1.5 进行微信小程序开发的步骤

由于小程序是微信提供的一套Hybrid 解决方案，前端开发者可以超快上手。微信小程序提供完善的开发工具链，熟悉客户端的开发者也可以快速上手小程序开发。

- 注册小程序开发账号
- 下载微信开发者工具
- 学习开发语言基础知识和小程序框架原理
- 学习小程序 API 使用
- 学习小程序调试和上线操作

## 【2/5】小程序架构及其实现机制

### 2.3 小程序 VS HTML5

- 小程序和H5，有人会傻傻分不清楚。小程序偏向于传统CS架构，基于数据驱动的模式，在小程序里一切皆为(视图)组件。
- 因为不执行在浏览器的宿主环境，浏览器提供的window、document等BOM对象，小程序都没有。所以在小程序内不能使用document.querySelector这类DOM选择器，也不支持XMLHttpRequest、location、localStorage等这些浏览器提供的API。
- 小程序访问资源使用wx.request不存在跨域的问题，它通过信道服务进行通信和会话管理，所以不支持Cookie存储。
- 小程序在 JavaScript 的模块化上支持 CommonJS，通过 require 加载。
- 小程序的页面样式完全继承 CSS 语法，在选择器上会少一些，布局支持 flex 布局。
- 程序的整体框架采用面向状态编程方式，状态管理从 API 来看采用类似 Redux 的设计方式；单向数据绑定方式，当 View 在 Action 操作后，只能通过 Action 的业务处理来更新 View。
 
页面组件模块上，WXML 提供了一整套的「自定义 UI 组件标签」，有些组件实际是 HTML5 实现的，有些组件为了解决权限、性能和适配等问题实际是 Native 实现的(如 map、input、canvas、video)。
 
### 2.2 小程序的架构
 
网上的图，以下是小程序的架构：
 
<div class="scale"><img src="img/resources/wechatsmall/weixinsmallstructure.png"  alt="weixinsmallstructure" /></div>
 
小程序架构分为视图层和逻辑层，视图层是在 WebView 内渲染，逻辑层则有 JavaScriptCore 来渲染；【关于这一点的证据，之后会新开一篇博客来说明】
 
视图层可以有多个(考虑到整体性能，最多可以 5 个)，逻辑层则全局只有一个(实际通过开启 X5 内核另起一个 JavascriptCore 线程)。
 
### 2.3 小程序生命周期
 
小程序生命周期包括应用的生命周期(逻辑层 App Service)和页面的生命周期(视图层 View)，两者支持的事件不同。下图是官方文档的配图：
 
<div class="scale"><img src="img/resources/wechatsmall/wechatsmalllifecycle.png"  alt="wechatsmalllifecycle" /></div>
  
小程序启动时，会同时启动两个线程，一个负责页面渲染的 WebView(实际不止一个)，一个负责逻辑的 JavaScriptCore。逻辑层初始化后会将初始化数据(app.js 中的 global data)通过 JSBridge 传递给渲染层进行渲染，渲染层 WebView 页面渲染完之后又会跟逻辑层通信。
  
理解小程序的架构，并弄明白小程序的启动流程后，对照上面的小程序生命周期图就可以较好的理解小程序的整个LifeCycle了。
  
### 小程序为什么感觉快

因为小程序的视图层做了预加载处理，所以在交互体验上，小程序的页面流畅，点击之后的页面跳转比普通的HTML5快很多。【关于这一点的证据，之后会新开一篇博客来说明】

### 小程序 WXML 是怎么转成 HTML 的

【这部分很有趣，之后会新开一篇博客来说明】

## 【3/5】小程序开发知识

### 小程序开发语言

小程序的视图层由WXML和WXSS组成，分别对应HTML和CSS，逻辑层则跟 HTML5 一样，也是JavaScript语言实现。

- WXML：小程序平台下的XML语法描述
— WXSS：小程序页面的样式表语言，描述WXML的样式
- JavaScript：小程序JavaScript环境处于微信App的上下文，不能像在浏览器内一样对页面DOM进行操作

微信小程序运行在三端：iOS、Android 和用于调试的开发者工具

- 在 iOS 上，小程序的 JavaScript 代码运行在 JavaScriptCore 中
- 在 Android 上，小程序的 JavaScript 代码通过 X5 内核来解析
- 在 开发工具上，小程序的 JavaScript 代码运行在 NW.js（Chromium 内核） 中

除了普通的JavaScript，小程序开发还支持WXS，引入它的主要目的是为了增强WXML的数据处理能力。

### 小程序项目

#### 小程序目录结构

小程序项目有配置文件、页面文件、静态资源和其他相关（组件、小程序云函数等）内容组成：

- .json 后缀的JSON配置文件
- .wxml 后缀的WXML模板文件
- .wxss 后缀的WXSS样式文件
- .js 后缀的JS脚本逻辑文件

小程序项目的目录结构并无严格要求，从前端项目经验角度，一般分为：配置、页面、静态资源、基础库、组件等目录。

无论目录结构如何，小程序必须要有app.json和页面组成。

在开发复杂项目时，会用到开发框架或编译工具，此时目录结构需要保证编译之后的目录结构符合规范。

### 小程序的配置

小程序的三个重要配置：

- project.config.json（工具项目配置）：配置项目工具相关，比如开发者工具的编译设置（是否使用 ES6 语法等）、界面设置，以及云函数相关的 cloudfunctionRoot
- app.json（小程序配置）：小程序的全局配置，包括了所有页面路径、界面表现、网络超时时间、底部 tab、插件等，常用的两个配置是 window 和 pages
- page.json：是相对于 app.json 更细粒度的单页面配置

### 组件和插件

小程序页面是由各种组件组成的，组件可以类比成原生 HTML5 的标签。

#### 组件

小程序内部定义了很多组件，可以对应 HTML5 的标签和基础能力来理解，小程序的组件根据实现不同，可以分为 Web 组件和 Native 组件，Web 组件是由 HTML5 原生 Web 组件封装的组件，比如 view、image 等；Native 组件是为了增强小程序的体验，用客户端技术实现的组件，包括一些交互复杂、原生 Web 组件性能不高的组件，例如 input、map、canvas、video 等。

小程序一共提供 8 大类 30 多个组件：

- 视图容器：主要是实现页面布局的，对常见的布局形式进行了封装，比如滚动 sroll-view 等
- 基本内容：类似 HTML5 中内容相关的 p、em 等
- 表单相关：要比 HTML5 的 form 表单丰富一些
- 导航：类似 a 标签
- 媒体：类比 HTML5 中的 video、audio 和 img 等，但是提供更标准的界面和更丰富的 API 支持
- 画布：Native 实现的 Canvas
- 地图：结合腾讯地图数据 Native 实现的组件
- 开放能力：这部分组件偏通用和小程序业务

#### 自定义组件

小程序本身支持很多组件，比如地图、按钮等，开发者也可以自己做项目内公共组件，比如做一个 icon 组件，放在 components 目录下面，这样此小程序的任何页面如果要使用这个 icon 公共组件，只需在自己的 page.json 中添加如下字段：

<pre>
"usingComponents": {
    "icon": "../../components/icon/index"
}
</pre>

添加完成之后，在页面代码中可以直接使用<icon>的tag。

#### 插件

插件是对一组 JS 接口、自定义组件或页面的封装，用于提供给第三方小程序调用。简单来说，插件是组件的升级版本，组件只能在自己项目中使用，插件则更独立，是可以发布到全网，供其他开发者使用的。例如，在项目中使用一款日历插件，则需要在 app.json 中增加 plugins 字段：

<pre>
"plugins": {
    "calendar": {
        "version": "1.1.3",
        "provider": "wx92c68dae5a8bb046"
    }
}
</pre>

### 小程序开发知识

toto

## 【4/5】小程序云开发知识

todo

## 【5/5】小程序高级研发知识

todo



<div class="scale"><img src="img/hugkiss.jpg"  alt="λanguage" /></div>



